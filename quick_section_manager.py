# -*- coding: utf-8 -*-
"""
Quick Section Manager - ‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏õ‡∏¥‡∏î Advanced Section Manager
‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ GUI ‡πÄ‡∏î‡πâ‡∏á‡∏´‡∏≤‡∏¢‡πÑ‡∏õ
"""

import FreeCAD as App

def method1_taskpanel():
    """‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ö‡∏ö TaskPanel (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ - ‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î)"""
    print("=" * 50)
    print("‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: TaskPanel Version (‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î)")
    print("=" * 50)
    
    try:
        from freecad.StructureTools.gui.SectionManagerTaskPanel import show_advanced_section_manager_task_panel
        
        result = show_advanced_section_manager_task_panel()
        
        if result:
            print("‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! TaskPanel ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß")
            print("üìç ‡∏î‡∏π TaskPanel ‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡πâ‡∏≤‡∏Ç‡∏≠‡∏á FreeCAD")
            return True
        else:
            print("‚ùå TaskPanel ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ")
            return False
            
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

def method2_command():
    """‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: ‡πÉ‡∏ä‡πâ FreeCAD Command"""
    print("\n" + "=" * 50)
    print("‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: FreeCAD Command")
    print("=" * 50)
    
    try:
        import FreeCADGui as Gui
        
        # ‡∏•‡∏≠‡∏á TaskPanel command ‡∏Å‡πà‡∏≠‡∏ô
        print("üîÑ ‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏¥‡∏î TaskPanel Command...")
        try:
            Gui.runCommand('StructureTools_AdvancedSectionManagerTaskPanel')
            print("‚úÖ TaskPanel Command ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
            return True
        except:
            print("‚ö†Ô∏è TaskPanel Command ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ")
        
        # ‡∏•‡∏≠‡∏á GUI command
        print("üîÑ ‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏¥‡∏î GUI Command...")
        try:
            Gui.runCommand('StructureTools_AdvancedSectionManager')
            print("‚úÖ GUI Command ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
            return True
        except:
            print("‚ùå GUI Command ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ")
        
        return False
        
    except Exception as e:
        print(f"‚ùå Command Error: {e}")
        return False

def method3_direct_gui():
    """‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 3: ‡πÄ‡∏õ‡∏¥‡∏î GUI ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡∏≠‡∏≤‡∏à‡πÄ‡∏î‡πâ‡∏á‡∏´‡∏≤‡∏¢‡πÑ‡∏õ)"""
    print("\n" + "=" * 50)
    print("‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 3: Direct GUI (‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£)")
    print("=" * 50)
    
    try:
        from freecad.StructureTools.gui.SectionManagerGUI import show_section_manager_gui
        
        print("üîÑ ‡πÄ‡∏õ‡∏¥‡∏î GUI ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á...")
        gui = show_section_manager_gui()
        
        if gui:
            print("‚úÖ GUI ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß (‡πÅ‡∏ï‡πà‡∏≠‡∏≤‡∏à‡∏´‡∏≤‡∏¢‡πÑ‡∏õ)")
            print("üìç ‡∏ñ‡πâ‡∏≤‡∏´‡∏≤‡∏¢‡πÑ‡∏õ ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô")
            return True
        else:
            print("‚ùå GUI ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ")
            return False
            
    except Exception as e:
        print(f"‚ùå GUI Error: {e}")
        import traceback
        traceback.print_exc()
        return False

def method4_simple_dialog():
    """‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 4: Simple Dialog ‡∏™‡∏≥‡∏£‡∏≠‡∏á"""
    print("\n" + "=" * 50)
    print("‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 4: Simple Dialog (‡∏™‡∏≥‡∏£‡∏≠‡∏á)")
    print("=" * 50)
    
    try:
        from freecad.StructureTools.gui.SectionManagerTaskPanel import AdvancedSectionManagerTaskPanel
        
        # ‡∏•‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á TaskPanel ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
        print("üîÑ ‡∏™‡∏£‡πâ‡∏≤‡∏á Simple TaskPanel...")
        panel = AdvancedSectionManagerTaskPanel()
        
        if panel and hasattr(panel, 'form'):
            print("‚úÖ Simple TaskPanel ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏î‡πâ")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ö‡∏ö Dialog ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
            try:
                from PySide2.QtWidgets import QDialog, QVBoxLayout, QPushButton
            except:
                from PySide.QtWidgets import QDialog, QVBoxLayout, QPushButton
            
            dialog = QDialog()
            dialog.setWindowTitle("Advanced Section Manager - Simple Version")
            dialog.setGeometry(200, 200, 800, 600)
            
            layout = QVBoxLayout(dialog)
            layout.addWidget(panel.form)
            
            close_btn = QPushButton("Close")
            close_btn.clicked.connect(dialog.close)
            layout.addWidget(close_btn)
            
            dialog.show()
            dialog.raise_()
            dialog.activateWindow()
            
            # ‡πÄ‡∏Å‡πá‡∏ö reference
            if not hasattr(method4_simple_dialog, '_dialogs'):
                method4_simple_dialog._dialogs = []
            method4_simple_dialog._dialogs.append(dialog)
            
            print("‚úÖ Simple Dialog ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß!")
            return True
        else:
            print("‚ùå Simple TaskPanel ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ")
            return False
            
    except Exception as e:
        print(f"‚ùå Simple Dialog Error: {e}")
        return False

def run_quick_section_manager():
    """‡∏£‡∏±‡∏ô‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏≠‡∏±‡∏ô‡πÉ‡∏î‡∏≠‡∏±‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á"""
    print("üöÄ Advanced Section Manager - Quick Launcher")
    print("üéØ ‡∏à‡∏∞‡∏•‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏î‡πâ")
    print("=" * 60)
    
    methods = [
        ("TaskPanel (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥)", method1_taskpanel),
        ("Command", method2_command),
        ("Direct GUI", method3_direct_gui),
        ("Simple Dialog", method4_simple_dialog)
    ]
    
    for method_name, method_func in methods:
        print(f"\nüîß ‡∏•‡∏≠‡∏á {method_name}...")
        try:
            success = method_func()
            if success:
                print(f"\nüéâ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß! ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ: {method_name}")
                print("\nüìã ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ:")
                print("1. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Shape Type (‡πÄ‡∏ä‡πà‡∏ô Wide Flange Beams)")
                print("2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Section ‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
                print("3. ‡∏î‡∏π Properties ‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á")
                print("4. ‡∏Ñ‡∏•‡∏¥‡∏Å 'Create StructureTools Section' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á")
                print("\n‚ö° ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏´‡πá‡∏ô steelpy sections:")
                print("   pip install steelpy")
                print("   ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏õ‡∏¥‡∏î FreeCAD ‡πÉ‡∏´‡∏°‡πà")
                return True
                
        except Exception as e:
            print(f"‚ùå {method_name} failed: {e}")
    
    print("\nüòû ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ - ‡∏•‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:")
    print("1. pip install PySide2")
    print("2. pip install steelpy")  
    print("3. ‡πÄ‡∏õ‡∏¥‡∏î FreeCAD ‡πÉ‡∏´‡∏°‡πà")
    print("4. ‡∏•‡∏≠‡∏á‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ô‡∏µ‡πâ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
    
    return False

def show_debug_info():
    """‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£ debug"""
    print("\n" + "=" * 60)
    print("üîç DEBUG INFORMATION")
    print("=" * 60)
    
    # Check PySide
    try:
        from PySide2 import QtWidgets
        print("‚úÖ PySide2 available")
    except:
        try:
            from PySide import QtWidgets  
            print("‚úÖ PySide available")
        except:
            print("‚ùå No PySide available - install PySide2")
    
    # Check steelpy
    try:
        from freecad.StructureTools.data.SteelPyIntegrationFixed import STEELPY_AVAILABLE
        if STEELPY_AVAILABLE:
            print("‚úÖ steelpy available and working")
        else:
            print("‚ö†Ô∏è steelpy not available - install with: pip install steelpy")
    except Exception as e:
        print(f"‚ùå steelpy integration error: {e}")
    
    # Check FreeCADGui
    try:
        import FreeCADGui as Gui
        print("‚úÖ FreeCADGui available")
    except:
        print("‚ùå FreeCADGui not available")
    
    # Check commands
    try:
        import FreeCADGui as Gui
        commands = Gui.listCommands()
        adv_commands = [cmd for cmd in commands if 'AdvancedSectionManager' in cmd]
        if adv_commands:
            print(f"‚úÖ Commands found: {adv_commands}")
        else:
            print("‚ö†Ô∏è No Advanced Section Manager commands found")
    except:
        pass

# Main execution
if __name__ == "__main__":
    try:
        import FreeCAD
        print(f"üîß Running in FreeCAD {FreeCAD.Version()}")
        
        show_debug_info()
        success = run_quick_section_manager()
        
        if not success:
            print("\nüí° ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏•‡∏≠‡∏á‡∏£‡∏±‡∏ô‡πÉ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ñ‡∏±‡∏î‡πÑ‡∏õ:")
            print("exec(open(r'C:\\Users\\thani\\AppData\\Roaming\\FreeCAD\\Mod\\StructureTools\\debug_gui.py').read())")
            
    except ImportError:
        print("‚ö†Ô∏è This should be run from FreeCAD Python console")
        print("Copy and paste this code into FreeCAD:")
        print("exec(open(r'C:\\Users\\thani\\AppData\\Roaming\\FreeCAD\\Mod\\StructureTools\\quick_section_manager.py').read())")

# Quick functions for direct use
def taskpanel():
    """Quick function: ‡πÄ‡∏õ‡∏¥‡∏î TaskPanel"""
    return method1_taskpanel()

def gui():
    """Quick function: ‡πÄ‡∏õ‡∏¥‡∏î GUI"""  
    return method3_direct_gui()

def cmd():
    """Quick function: ‡πÄ‡∏õ‡∏¥‡∏î‡∏î‡πâ‡∏ß‡∏¢ Command"""
    return method2_command()

print("\nüöÄ Quick Functions:")
print("taskpanel() - ‡πÄ‡∏õ‡∏¥‡∏î TaskPanel")
print("gui() - ‡πÄ‡∏õ‡∏¥‡∏î GUI")  
print("cmd() - ‡πÄ‡∏õ‡∏¥‡∏î‡∏î‡πâ‡∏ß‡∏¢ Command")