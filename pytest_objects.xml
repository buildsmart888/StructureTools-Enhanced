<?xml version="1.0" encoding="utf-8"?><testsuites name="pytest tests"><testsuite name="pytest" errors="0" failures="8" skipped="0" tests="52" time="7.965" timestamp="2025-08-22T09:52:04.880228+07:00" hostname="hp"><testcase classname="tests.unit.objects.test_structural_beam.TestStructuralBeam" name="test_beam_initialization" time="0.320" /><testcase classname="tests.unit.objects.test_structural_beam.TestStructuralBeam" name="test_geometry_calculation" time="0.010" /><testcase classname="tests.unit.objects.test_structural_beam.TestStructuralBeam" name="test_local_coordinate_system" time="0.007" /><testcase classname="tests.unit.objects.test_structural_beam.TestStructuralBeam" name="test_vertical_beam_coordinate_system" time="0.005" /><testcase classname="tests.unit.objects.test_structural_beam.TestStructuralBeam" name="test_section_property_validation" time="0.007" /><testcase classname="tests.unit.objects.test_structural_beam.TestStructuralBeam" name="test_section_property_mismatch_warning" time="0.013" /><testcase classname="tests.unit.objects.test_structural_beam.TestStructuralBeam" name="test_end_condition_updates" time="0.011" /><testcase classname="tests.unit.objects.test_structural_beam.TestStructuralBeam" name="test_material_property_update" time="0.009" /><testcase classname="tests.unit.objects.test_structural_beam.TestStructuralBeam" name="test_load_consistency_validation" time="0.008" /><testcase classname="tests.unit.objects.test_structural_beam.TestStructuralBeamStiffness" name="test_stiffness_matrix_size" time="0.011" /><testcase classname="tests.unit.objects.test_structural_beam.TestStructuralBeamStiffness" name="test_stiffness_matrix_symmetry" time="0.007" /><testcase classname="tests.unit.objects.test_structural_beam.TestStructuralBeamStiffness" name="test_axial_stiffness" time="0.007" /><testcase classname="tests.unit.objects.test_structural_beam.TestStructuralBeamStiffness" name="test_bending_stiffness_strong_axis" time="0.008" /><testcase classname="tests.unit.objects.test_structural_beam.TestStructuralBeamStiffness" name="test_zero_length_beam" time="0.016" /><testcase classname="tests.unit.objects.test_structural_beam.TestStructuralBeamLoads" name="test_distributed_load_conversion" time="0.014" /><testcase classname="tests.unit.objects.test_structural_beam.TestStructuralBeamLoads" name="test_empty_load_vector" time="0.013" /><testcase classname="tests.unit.objects.test_structural_beam.TestStructuralBeamPerformance" name="test_beam_creation_performance" time="1.710" /><testcase classname="tests.unit.objects.test_structural_beam.TestStructuralBeamPerformance" name="test_stiffness_matrix_performance" time="0.988" /><testcase classname="tests.unit.objects.test_structural_material.TestStructuralMaterial" name="test_material_initialization" time="0.004" /><testcase classname="tests.unit.objects.test_structural_material.TestStructuralMaterial" name="test_poisson_ratio_validation_valid_range" time="0.003" /><testcase classname="tests.unit.objects.test_structural_material.TestStructuralMaterial" name="test_poisson_ratio_validation_invalid_range" time="0.009" /><testcase classname="tests.unit.objects.test_structural_material.TestStructuralMaterial" name="test_material_standard_update" time="0.028" /><testcase classname="tests.unit.objects.test_structural_material.TestStructuralMaterial" name="test_shear_modulus_calculation" time="0.007" /><testcase classname="tests.unit.objects.test_structural_material.TestStructuralMaterial" name="test_strength_validation_valid_relationship" time="0.009" /><testcase classname="tests.unit.objects.test_structural_material.TestStructuralMaterial" name="test_strength_validation_invalid_relationship" time="0.014" /><testcase classname="tests.unit.objects.test_structural_material.TestStructuralMaterial" name="test_validation_warning_management" time="0.005" /><testcase classname="tests.unit.objects.test_structural_material.TestStructuralMaterial" name="test_execute_method" time="0.008" /><testcase classname="tests.unit.objects.test_structural_material.TestStructuralMaterial" name="test_freecad_material_integration" time="0.008" /><testcase classname="tests.unit.objects.test_structural_material.TestStructuralMaterialProperties" name="test_elastic_modulus_ranges" time="0.004" /><testcase classname="tests.unit.objects.test_structural_material.TestStructuralMaterialProperties" name="test_density_validation" time="0.003" /><testcase classname="tests.unit.objects.test_structural_material.TestStructuralMaterialProperties" name="test_thermal_expansion_validation" time="0.004" /><testcase classname="tests.unit.objects.test_structural_material.TestStructuralMaterialPerformance" name="test_material_creation_performance" time="1.247" /><testcase classname="tests.unit.objects.test_structural_material.TestStructuralMaterialPerformance" name="test_property_validation_performance" time="0.396" /><testcase classname="tests.unit.objects.test_structural_node.TestStructuralNode" name="test_node_initialization" time="0.005" /><testcase classname="tests.unit.objects.test_structural_node.TestStructuralNode" name="test_restraint_code_generation" time="0.006" /><testcase classname="tests.unit.objects.test_structural_node.TestStructuralNode" name="test_fixed_support_restraint_code" time="0.007"><failure message="AssertionError: assert '000000' == '111111'&#10;  &#10;  #x1B[0m#x1B[91m- 111111#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  #x1B[92m+ 000000#x1B[39;49;00m#x1B[90m#x1B[39;49;00m">self = &lt;tests.unit.objects.test_structural_node.TestStructuralNode object at 0x0000028F398348A0&gt;

    def test_fixed_support_restraint_code(self):
        """Test restraint code for fixed support."""
        # All restraints active
        restraint_values = {
            'RestraintX': True, 'RestraintY': True, 'RestraintZ': True,
            'RestraintRX': True, 'RestraintRY': True, 'RestraintRZ': True
        }
    
        def mock_getattr(obj, attr, default=False):
            return restraint_values.get(attr, default)
    
        with patch('builtins.getattr', side_effect=mock_getattr):
            restraint_code = self.node.get_restraint_code()
&gt;           assert restraint_code == "111111"  # Fixed support
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E           AssertionError: assert '000000' == '111111'
E             
E             #x1B[0m#x1B[91m- 111111#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E             #x1B[92m+ 000000#x1B[39;49;00m#x1B[90m#x1B[39;49;00m

mock_getattr = &lt;function TestStructuralNode.test_fixed_support_restraint_code.&lt;locals&gt;.mock_getattr at 0x0000028F3B5D8720&gt;
restraint_code = '000000'
restraint_values = {'RestraintRX': True, 'RestraintRY': True, 'RestraintRZ': True, 'RestraintX': True, ...}
self       = &lt;tests.unit.objects.test_structural_node.TestStructuralNode object at 0x0000028F398348A0&gt;

tests\unit\objects\test_structural_node.py:77: AssertionError</failure></testcase><testcase classname="tests.unit.objects.test_structural_node.TestStructuralNode" name="test_roller_support_restraint_code" time="0.004"><failure message="AssertionError: assert '000000' == '001000'&#10;  &#10;  #x1B[0m#x1B[91m- 001000#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  #x1B[92m+ 000000#x1B[39;49;00m#x1B[90m#x1B[39;49;00m">self = &lt;tests.unit.objects.test_structural_node.TestStructuralNode object at 0x0000028F398356E0&gt;

    def test_roller_support_restraint_code(self):
        """Test restraint code for roller support."""
        # Only vertical restraint
        restraint_values = {
            'RestraintX': False, 'RestraintY': False, 'RestraintZ': True,
            'RestraintRX': False, 'RestraintRY': False, 'RestraintRZ': False
        }
    
        def mock_getattr(obj, attr, default=False):
            return restraint_values.get(attr, default)
    
        with patch('builtins.getattr', side_effect=mock_getattr):
            restraint_code = self.node.get_restraint_code()
&gt;           assert restraint_code == "001000"  # Roller support
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E           AssertionError: assert '000000' == '001000'
E             
E             #x1B[0m#x1B[91m- 001000#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E             #x1B[92m+ 000000#x1B[39;49;00m#x1B[90m#x1B[39;49;00m

mock_getattr = &lt;function TestStructuralNode.test_roller_support_restraint_code.&lt;locals&gt;.mock_getattr at 0x0000028F40307600&gt;
restraint_code = '000000'
restraint_values = {'RestraintRX': False, 'RestraintRY': False, 'RestraintRZ': False, 'RestraintX': False, ...}
self       = &lt;tests.unit.objects.test_structural_node.TestStructuralNode object at 0x0000028F398356E0&gt;

tests\unit\objects\test_structural_node.py:92: AssertionError</failure></testcase><testcase classname="tests.unit.objects.test_structural_node.TestStructuralNode" name="test_free_node_restraint_code" time="0.004" /><testcase classname="tests.unit.objects.test_structural_node.TestStructuralNode" name="test_is_restrained_check" time="0.016"><failure message="assert False == True&#10; +  where False = is_restrained()&#10; +    where is_restrained = &lt;StructureTools.objects.StructuralNode.StructuralNode object at 0x0000028F3F4CF530&gt;.is_restrained&#10; +      where &lt;StructureTools.objects.StructuralNode.StructuralNode object at 0x0000028F3F4CF530&gt; = &lt;tests.unit.objects.test_structural_node.TestStructuralNode object at 0x0000028F39810AF0&gt;.node">self = &lt;tests.unit.objects.test_structural_node.TestStructuralNode object at 0x0000028F39810AF0&gt;

    def test_is_restrained_check(self):
        """Test restraint detection."""
        # Test with restraints
        restraint_values = {
            'RestraintX': True, 'RestraintY': False, 'RestraintZ': False,
            'RestraintRX': False, 'RestraintRY': False, 'RestraintRZ': False
        }
    
        def mock_getattr(obj, attr, default=False):
            return restraint_values.get(attr, default)
    
        with patch('builtins.getattr', side_effect=mock_getattr):
&gt;           assert self.node.is_restrained() == True
E           assert False == True
E            +  where False = is_restrained()
E            +    where is_restrained = &lt;StructureTools.objects.StructuralNode.StructuralNode object at 0x0000028F3F4CF530&gt;.is_restrained
E            +      where &lt;StructureTools.objects.StructuralNode.StructuralNode object at 0x0000028F3F4CF530&gt; = &lt;tests.unit.objects.test_structural_node.TestStructuralNode object at 0x0000028F39810AF0&gt;.node

mock_getattr = &lt;function TestStructuralNode.test_is_restrained_check.&lt;locals&gt;.mock_getattr at 0x0000028F40318180&gt;
restraint_values = {'RestraintRX': False, 'RestraintRY': False, 'RestraintRZ': False, 'RestraintX': True, ...}
self       = &lt;tests.unit.objects.test_structural_node.TestStructuralNode object at 0x0000028F39810AF0&gt;

tests\unit\objects\test_structural_node.py:121: AssertionError</failure></testcase><testcase classname="tests.unit.objects.test_structural_node.TestStructuralNode" name="test_degrees_of_freedom_calculation" time="0.004"><failure message="assert 6 == 0&#10; +  where 6 = get_degrees_of_freedom()&#10; +    where get_degrees_of_freedom = &lt;StructureTools.objects.StructuralNode.StructuralNode object at 0x0000028F39812580&gt;.get_degrees_of_freedom&#10; +      where &lt;StructureTools.objects.StructuralNode.StructuralNode object at 0x0000028F39812580&gt; = &lt;tests.unit.objects.test_structural_node.TestStructuralNode object at 0x0000028F398106B0&gt;.node">self = &lt;tests.unit.objects.test_structural_node.TestStructuralNode object at 0x0000028F398106B0&gt;

    def test_degrees_of_freedom_calculation(self):
        """Test DOF calculation."""
        # Fixed support (0 DOF)
        restraint_values_fixed = {
            'RestraintX': True, 'RestraintY': True, 'RestraintZ': True,
            'RestraintRX': True, 'RestraintRY': True, 'RestraintRZ': True
        }
    
        def mock_getattr_fixed(obj, attr, default=False):
            return restraint_values_fixed.get(attr, default)
    
        with patch('builtins.getattr', side_effect=mock_getattr_fixed):
&gt;           assert self.node.get_degrees_of_freedom() == 0
E           assert 6 == 0
E            +  where 6 = get_degrees_of_freedom()
E            +    where get_degrees_of_freedom = &lt;StructureTools.objects.StructuralNode.StructuralNode object at 0x0000028F39812580&gt;.get_degrees_of_freedom
E            +      where &lt;StructureTools.objects.StructuralNode.StructuralNode object at 0x0000028F39812580&gt; = &lt;tests.unit.objects.test_structural_node.TestStructuralNode object at 0x0000028F398106B0&gt;.node

mock_getattr_fixed = &lt;function TestStructuralNode.test_degrees_of_freedom_calculation.&lt;locals&gt;.mock_getattr_fixed at 0x0000028F403184A0&gt;
restraint_values_fixed = {'RestraintRX': True, 'RestraintRY': True, 'RestraintRZ': True, 'RestraintX': True, ...}
self       = &lt;tests.unit.objects.test_structural_node.TestStructuralNode object at 0x0000028F398106B0&gt;

tests\unit\objects\test_structural_node.py:147: AssertionError</failure></testcase><testcase classname="tests.unit.objects.test_structural_node.TestStructuralNode" name="test_position_update_triggers_visual_update" time="0.005" /><testcase classname="tests.unit.objects.test_structural_node.TestStructuralNode" name="test_restraint_change_triggers_visual_update" time="0.012" /><testcase classname="tests.unit.objects.test_structural_node.TestStructuralNode" name="test_connection_type_update" time="0.006" /><testcase classname="tests.unit.objects.test_structural_node.TestStructuralNode" name="test_nodal_load_validation" time="0.006" /><testcase classname="tests.unit.objects.test_structural_node.TestStructuralNode" name="test_consistent_nodal_loads_no_warning" time="0.006" /><testcase classname="tests.unit.objects.test_structural_node.TestStructuralNodeVisualRepresentation" name="test_restraint_symbol_creation_fixed" time="0.007"><failure message="AttributeError: module 'Part' has no attribute '__func__'. Did you mean: '__doc__'?">self = &lt;tests.unit.objects.test_structural_node.TestStructuralNodeVisualRepresentation object at 0x0000028F39800E10&gt;
mock_vector = &lt;class 'tests.conftest.MockVector'&gt;

    def test_restraint_symbol_creation_fixed(self, mock_vector):
        """Test restraint symbol creation for fixed support."""
        # Set up fixed support
        self.mock_obj.Position = mock_vector(0, 0, 0)
        self.mock_obj.RestraintX = True
        self.mock_obj.RestraintY = True
        self.mock_obj.RestraintZ = True
    
        def mock_getattr(obj, attr, default=False):
            if attr == 'RestraintX' or attr == 'RestraintY' or attr == 'RestraintZ':
                return True
            return default
    
        with patch('builtins.getattr', side_effect=mock_getattr):
            with patch('builtins.hasattr', return_value=True):
&gt;               with patch('StructureTools.objects.StructuralNode.Part') as mock_part:
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

mock_getattr = &lt;function TestStructuralNodeVisualRepresentation.test_restraint_symbol_creation_fixed.&lt;locals&gt;.mock_getattr at 0x0000028F403189A0&gt;
mock_vector = &lt;class 'tests.conftest.MockVector'&gt;
self       = &lt;tests.unit.objects.test_structural_node.TestStructuralNodeVisualRepresentation object at 0x0000028F39800E10&gt;

tests\unit\objects\test_structural_node.py:247: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\conftest.py:97: in _patched_patch_enter
    return _orig_patch_enter(self, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        args       = ()
        kwargs     = {}
        saved      = &lt;built-in function getattr&gt;
        self       = &lt;unittest.mock._patch object at 0x0000028F397FE190&gt;
C:\Python313\Lib\unittest\mock.py:1524: in __enter__
    elif spec is None and _is_async_obj(original):
                          ^^^^^^^^^^^^^^^^^^^^^^^
        autospec   = None
        inherit    = False
        kwargs     = {}
        local      = True
        new        = sentinel.DEFAULT
        new_callable = None
        original   = &lt;module 'Part' from 'C:\\Users\\thani\\AppData\\Roaming\\FreeCAD\\Mod\\StructureTools\\freecad\\Part.py'&gt;
        self       = &lt;unittest.mock._patch object at 0x0000028F397FE190&gt;
        spec       = None
        spec_set   = None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

obj = &lt;module 'Part' from 'C:\\Users\\thani\\AppData\\Roaming\\FreeCAD\\Mod\\StructureTools\\freecad\\Part.py'&gt;

    def _is_async_obj(obj):
        if _is_instance_mock(obj) and not isinstance(obj, AsyncMock):
            return False
        if hasattr(obj, '__func__'):
&gt;           obj = getattr(obj, '__func__')
                  ^^^^^^^^^^^^^^^^^^^^^^^^
E           AttributeError: module 'Part' has no attribute '__func__'. Did you mean: '__doc__'?

obj        = &lt;module 'Part' from 'C:\\Users\\thani\\AppData\\Roaming\\FreeCAD\\Mod\\StructureTools\\freecad\\Part.py'&gt;

C:\Python313\Lib\unittest\mock.py:59: AttributeError</failure></testcase><testcase classname="tests.unit.objects.test_structural_node.TestStructuralNodeVisualRepresentation" name="test_restraint_symbol_creation_pinned" time="0.006"><failure message="AttributeError: module 'Part' has no attribute '__func__'. Did you mean: '__doc__'?">self = &lt;tests.unit.objects.test_structural_node.TestStructuralNodeVisualRepresentation object at 0x0000028F39801090&gt;
mock_vector = &lt;class 'tests.conftest.MockVector'&gt;

    def test_restraint_symbol_creation_pinned(self, mock_vector):
        """Test restraint symbol creation for pinned support."""
        # Set up pinned support
        self.mock_obj.Position = mock_vector(0, 0, 0)
    
        def mock_getattr(obj, attr, default=False):
            restraint_values = {
                'RestraintX': True, 'RestraintY': True, 'RestraintZ': True,
                'RestraintRX': False, 'RestraintRY': False, 'RestraintRZ': False
            }
            return restraint_values.get(attr, default)
    
        with patch('builtins.getattr', side_effect=mock_getattr):
            with patch('builtins.hasattr', return_value=True):
&gt;               with patch('StructureTools.objects.StructuralNode.Part') as mock_part:
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

mock_getattr = &lt;function TestStructuralNodeVisualRepresentation.test_restraint_symbol_creation_pinned.&lt;locals&gt;.mock_getattr at 0x0000028F40318CC0&gt;
mock_vector = &lt;class 'tests.conftest.MockVector'&gt;
self       = &lt;tests.unit.objects.test_structural_node.TestStructuralNodeVisualRepresentation object at 0x0000028F39801090&gt;

tests\unit\objects\test_structural_node.py:266: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\conftest.py:97: in _patched_patch_enter
    return _orig_patch_enter(self, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        args       = ()
        kwargs     = {}
        saved      = &lt;built-in function getattr&gt;
        self       = &lt;unittest.mock._patch object at 0x0000028F397FC910&gt;
C:\Python313\Lib\unittest\mock.py:1524: in __enter__
    elif spec is None and _is_async_obj(original):
                          ^^^^^^^^^^^^^^^^^^^^^^^
        autospec   = None
        inherit    = False
        kwargs     = {}
        local      = True
        new        = sentinel.DEFAULT
        new_callable = None
        original   = &lt;module 'Part' from 'C:\\Users\\thani\\AppData\\Roaming\\FreeCAD\\Mod\\StructureTools\\freecad\\Part.py'&gt;
        self       = &lt;unittest.mock._patch object at 0x0000028F397FC910&gt;
        spec       = None
        spec_set   = None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

obj = &lt;module 'Part' from 'C:\\Users\\thani\\AppData\\Roaming\\FreeCAD\\Mod\\StructureTools\\freecad\\Part.py'&gt;

    def _is_async_obj(obj):
        if _is_instance_mock(obj) and not isinstance(obj, AsyncMock):
            return False
        if hasattr(obj, '__func__'):
&gt;           obj = getattr(obj, '__func__')
                  ^^^^^^^^^^^^^^^^^^^^^^^^
E           AttributeError: module 'Part' has no attribute '__func__'. Did you mean: '__doc__'?

obj        = &lt;module 'Part' from 'C:\\Users\\thani\\AppData\\Roaming\\FreeCAD\\Mod\\StructureTools\\freecad\\Part.py'&gt;

C:\Python313\Lib\unittest\mock.py:59: AttributeError</failure></testcase><testcase classname="tests.unit.objects.test_structural_node.TestStructuralNodeVisualRepresentation" name="test_restraint_symbol_creation_roller" time="0.004"><failure message="AttributeError: module 'Part' has no attribute '__func__'. Did you mean: '__doc__'?">self = &lt;tests.unit.objects.test_structural_node.TestStructuralNodeVisualRepresentation object at 0x0000028F39835810&gt;
mock_vector = &lt;class 'tests.conftest.MockVector'&gt;

    def test_restraint_symbol_creation_roller(self, mock_vector):
        """Test restraint symbol creation for roller support."""
        # Set up roller support
        self.mock_obj.Position = mock_vector(0, 0, 0)
    
        def mock_getattr(obj, attr, default=False):
            if attr == 'RestraintZ':
                return True
            return default
    
        with patch('builtins.getattr', side_effect=mock_getattr):
            with patch('builtins.hasattr', return_value=True):
&gt;               with patch('StructureTools.objects.StructuralNode.Part') as mock_part:
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

mock_getattr = &lt;function TestStructuralNodeVisualRepresentation.test_restraint_symbol_creation_roller.&lt;locals&gt;.mock_getattr at 0x0000028F40318D60&gt;
mock_vector = &lt;class 'tests.conftest.MockVector'&gt;
self       = &lt;tests.unit.objects.test_structural_node.TestStructuralNodeVisualRepresentation object at 0x0000028F39835810&gt;

tests\unit\objects\test_structural_node.py:283: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\conftest.py:97: in _patched_patch_enter
    return _orig_patch_enter(self, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        args       = ()
        kwargs     = {}
        saved      = &lt;built-in function getattr&gt;
        self       = &lt;unittest.mock._patch object at 0x0000028F40338590&gt;
C:\Python313\Lib\unittest\mock.py:1524: in __enter__
    elif spec is None and _is_async_obj(original):
                          ^^^^^^^^^^^^^^^^^^^^^^^
        autospec   = None
        inherit    = False
        kwargs     = {}
        local      = True
        new        = sentinel.DEFAULT
        new_callable = None
        original   = &lt;module 'Part' from 'C:\\Users\\thani\\AppData\\Roaming\\FreeCAD\\Mod\\StructureTools\\freecad\\Part.py'&gt;
        self       = &lt;unittest.mock._patch object at 0x0000028F40338590&gt;
        spec       = None
        spec_set   = None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

obj = &lt;module 'Part' from 'C:\\Users\\thani\\AppData\\Roaming\\FreeCAD\\Mod\\StructureTools\\freecad\\Part.py'&gt;

    def _is_async_obj(obj):
        if _is_instance_mock(obj) and not isinstance(obj, AsyncMock):
            return False
        if hasattr(obj, '__func__'):
&gt;           obj = getattr(obj, '__func__')
                  ^^^^^^^^^^^^^^^^^^^^^^^^
E           AttributeError: module 'Part' has no attribute '__func__'. Did you mean: '__doc__'?

obj        = &lt;module 'Part' from 'C:\\Users\\thani\\AppData\\Roaming\\FreeCAD\\Mod\\StructureTools\\freecad\\Part.py'&gt;

C:\Python313\Lib\unittest\mock.py:59: AttributeError</failure></testcase><testcase classname="tests.unit.objects.test_structural_node.TestStructuralNodeConnections" name="test_connection_type_pinned_releases" time="0.003" /><testcase classname="tests.unit.objects.test_structural_node.TestStructuralNodeConnections" name="test_connection_type_semi_rigid_stiffness" time="0.005" /><testcase classname="tests.unit.objects.test_structural_node.TestStructuralNodePerformance" name="test_node_creation_performance" time="1.048" /><testcase classname="tests.unit.objects.test_structural_node.TestStructuralNodePerformance" name="test_restraint_code_performance" time="0.279"><failure message="AssertionError: assert '000000' == '111000'&#10;  &#10;  #x1B[0m#x1B[91m- 111000#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  #x1B[92m+ 000000#x1B[39;49;00m#x1B[90m#x1B[39;49;00m">self = &lt;tests.unit.objects.test_structural_node.TestStructuralNodePerformance object at 0x0000028F39801590&gt;
benchmark = &lt;pytest_benchmark.fixture.BenchmarkFixture object at 0x0000028F39837490&gt;

    def test_restraint_code_performance(self, benchmark):
        """Benchmark restraint code generation performance."""
        mock_obj = Mock()
        mock_obj.addProperty = Mock()
        node = StructuralNode(mock_obj)
    
        def mock_getattr(obj, attr, default=False):
            # Simulate mixed restraints
            restraint_values = {
                'RestraintX': True, 'RestraintY': True, 'RestraintZ': True,
                'RestraintRX': False, 'RestraintRY': False, 'RestraintRZ': False
            }
            return restraint_values.get(attr, default)
    
        with patch('builtins.getattr', side_effect=mock_getattr):
            def generate_code():
                return node.get_restraint_code()
    
            result = benchmark(generate_code)
&gt;           assert result == "111000"
E           AssertionError: assert '000000' == '111000'
E             
E             #x1B[0m#x1B[91m- 111000#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E             #x1B[92m+ 000000#x1B[39;49;00m#x1B[90m#x1B[39;49;00m

benchmark  = &lt;pytest_benchmark.fixture.BenchmarkFixture object at 0x0000028F39837490&gt;
generate_code = &lt;function TestStructuralNodePerformance.test_restraint_code_performance.&lt;locals&gt;.generate_code at 0x0000028F40319F80&gt;
mock_getattr = &lt;function TestStructuralNodePerformance.test_restraint_code_performance.&lt;locals&gt;.mock_getattr at 0x0000028F4031A160&gt;
mock_obj   = &lt;Mock id='2814280540784'&gt;
node       = &lt;StructureTools.objects.StructuralNode.StructuralNode object at 0x0000028F403988D0&gt;
result     = '000000'
self       = &lt;tests.unit.objects.test_structural_node.TestStructuralNodePerformance object at 0x0000028F39801590&gt;

tests\unit\objects\test_structural_node.py:355: AssertionError</failure></testcase></testsuite></testsuites>